import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
buildscript {
    //-------VERSIONING-------
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def version_active = versionProps['version.active'].toBoolean()
    def isSnapshot     = versionProps['version.snapshot'].toBoolean()
    def version_specified= versionProps['version.specified'].toString()

    def version_major  = versionProps['version.major'].toInteger()
    def version_minor  = versionProps['version.minor'].toInteger()
    def version_patch  = versionProps['version.patch'].toInteger()
    def version_build  = versionProps['version.build'].toInteger()


    if (isSnapshot) {
        if(version_active){
            version_build += 1
        }
        version = "${version_major}.${version_minor}.${version_patch}${version_specified}-snapshot#${version_build}"
        System.out.println("VERSIONING-SNAPSHOT")
    } else {
        version = "${version_major}.${version_minor}.${version_patch}${version_specified}"
        System.out.println("VERSIONING-RELEASE")

    }

    project.version = version
    //-------VERSIONING END-------
}
plugins{
    id 'java'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id 'maven-publish'
}
archivesBaseName = project_name
group = project_group

//------VERSION UPDATE IN FILE------
task updateVersion{
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def version_active = versionProps['version.active'].toBoolean()
    def isSnapshot     = versionProps['version.snapshot'].toBoolean()
    def version_build  = isSnapshot?
            project.version.toString().split("#")[1] : 0
    if(version_active){
        def propsFilePath = file('version.properties').absolutePath
        def lines = Files.readAllLines(Paths.get(propsFilePath))
        def updatedLines = []
        lines.each { line ->
            if (line.startsWith("version.build=")) {
                line = "version.build=$version_build"
            } else if (line.startsWith("version.snapshot=")) {
                line = "version.snapshot=true"
            }
            updatedLines.add(line)
        }
        Files.write(Paths.get(propsFilePath), updatedLines, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)
        System.out.println("UPDATING BUILD VERSION")
    }
}
shadowJar.dependsOn(updateVersion)
//------VERSION UPDATE FINISH------




compileJava {

    sourceCompatibility = targetCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}



allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    apply plugin: 'com.github.johnrengelman.shadow'

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://redempt.dev' }
        maven { url = 'https://jitpack.io' }
    }
    dependencies {
        testImplementation platform('org.junit:junit-bom:5.10.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.mockito:mockito-core:5.5.0'
        testCompileOnly 'org.projectlombok:lombok:1.18.30'
        testCompileOnly 'org.jetbrains:annotations:23.0.0'

        //annotations
        compileOnly("org.projectlombok:lombok:1.18.30")
        compileOnly("org.jetbrains:annotations:23.0.0")
        annotationProcessor("org.projectlombok:lombok:1.18.30")
        annotationProcessor("org.jetbrains:annotations:23.0.0")

        compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    }

    //TESTS. Go through all config types
    test {
        useJUnitPlatform()
        systemProperty 'test.configType', 'JSON'
    }
    tasks.register('testYaml', Test) {
        useJUnitPlatform()
        description = "Runs the full test suite with CONFIG_TYPE=YAML"
        group = 'verification'


        testClassesDirs = test.testClassesDirs
        classpath = test.classpath

        // flip to YAML
        systemProperty 'test.configType', 'YAML'

        // carry over any logging / JVM settings
        testLogging.events = test.testLogging.events
        testLogging.exceptionFormat = test.testLogging.exceptionFormat
    }
    check.dependsOn testYaml

    java{
        withSourcesJar()
    }
    build{
        dependsOn(shadowJar)
    }
    shadowJar{
        archiveClassifier.set('')
    }
    compileJava{
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
        [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
        dependsOn(clean)
    }
}

dependencies {
    implementation(project('atumconfig-api'))
    implementation(project('atumconfig-core'))

}